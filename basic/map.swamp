use core::{assert, panic}
use std::{print}

struct CardTemplate {
    mana: Int,
    healing_per_second: Float,
}

enum CardId {
    MightyGolem,
    Earthquake,
    MysticSpring, // No one knows what mystic spring does, that is why it is mystic.
    EtherealDragon, // Ethereal Dragon is never there.
    GoblinScout,
}

struct Game {
    card_templates: [CardId: CardTemplate; 3],
}

#[test]
fn basic_map() {
	game = Game {
		card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 3, healing_per_second: 0.3 },
            CardId::MysticSpring: CardTemplate { mana: 2, healing_per_second: 1.5 },
        ]
	}

    assert(game.card_templates.has(CardId::MightyGolem), "should have MightyGolem")
    assert(!game.card_templates.has(CardId::EtherealDragon), "should not have EtherealDragon")


    print('healing_per_second: {CardId::MightyGolem}: {game.card_templates[CardId::MightyGolem].healing_per_second}')
    assert(game.card_templates[CardId::MightyGolem].mana == 5, "should be 5")

    print('mana: {game.card_templates[CardId::Earthquake].mana}')
    assert(game.card_templates[CardId::Earthquake].mana == 3, "should be 3")

    print('mana: {game.card_templates[CardId::MysticSpring].mana}')
    assert(game.card_templates[CardId::MysticSpring].mana == 2, "should be 2")
}


#[test]
#[should_trap(expected="map_entry_or_create_failed")]
fn add_too_many() {
	mut game = Game {
		card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 3, healing_per_second: 0.3 },
            CardId::MysticSpring: CardTemplate { mana: 2, healing_per_second: 1.5 },
        ]
	}

    game.card_templates[CardId::EtherealDragon] = CardTemplate { mana: 10, healing_per_second: 0.0 }
    game.card_templates[CardId::GoblinScout] = CardTemplate { mana: 1, healing_per_second: 0.1 }
}


#[test]
fn add_to_map() {
	mut game = Game {
		card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 3, healing_per_second: 0.3 },
        ]
	}

    assert(!game.card_templates.has(CardId::EtherealDragon), "should not have EtherealDragon")

    game.card_templates[CardId::EtherealDragon] = CardTemplate { mana: 10, healing_per_second: 0.0 }

    assert(game.card_templates.has(CardId::EtherealDragon), "should have EtherealDragon")
}

#[test]
fn overwrite_existing() {
	mut game = Game {
		card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 42, healing_per_second: 0.3 },
        ]
	}

    assert(game.card_templates[CardId::Earthquake].mana == 42, "should be 42")

    game.card_templates[CardId::Earthquake] = CardTemplate { mana: -1, healing_per_second: 0.0 }

    assert(game.card_templates[CardId::Earthquake].mana == -1, "should be -1")
}

#[test]
fn remove_card() {
    mut game = Game {
        card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: -2, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 99, healing_per_second: 0.3 },
            CardId::MysticSpring: CardTemplate { mana: 2, healing_per_second: 1.5 },
        ],
    }

    assert(game.card_templates.has(CardId::MysticSpring), "should have MysticSpring")

    game.card_templates.remove(CardId::MysticSpring)

    assert(!game.card_templates.has(CardId::MysticSpring), "should not have MysticSpring")
}

#[test]
#[should_trap(expected="map_entry_remove_failed")]
fn remove_non_existing_card() {
    mut game = Game {
        card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: -2, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 99, healing_per_second: 0.3 },
        ],
    }

    // Intentionally cause a trap, there is no mystic spring
    game.card_templates.remove(CardId::MysticSpring)
    panic("you shouldn't reach this")
}


#[test]
fn iterate_cards() {
    game = Game {
        card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 3, healing_per_second: 0.3 },
            CardId::MysticSpring: CardTemplate { mana: 2, healing_per_second: 1.5 },
        ],
    }

    mut count = 0
    for card_id, card_template in game.card_templates {
        print('Card ID: {card_id}, Mana: {card_template.mana}, Healing per second: {card_template.healing_per_second}')
        count += 1
    }

    assert(count == 3, "should iterate over 3 cards")
}

#[test]
fn iterate_cards_value_only() {
    game = Game {
        card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 3, healing_per_second: 0.3 },
            CardId::MysticSpring: CardTemplate { mana: 2, healing_per_second: 1.5 },
        ],
    }

    mut count = 0
    for card_template in game.card_templates {
        print('Mana: {card_template.mana}, Healing per second: {card_template.healing_per_second}')
        if count == 1 {
            // Note: the order can change in different versions of Swamp.
            // It is always deterministic, but the insert order depends on the hash function
            assert(card_template.mana == 3, "second should be EarthQuake")
        }
        count += 1
    }

    assert(count == 3, "should iterate over 3 cards")
}

fn overwite_card_template(mut card_template: CardTemplate, some_value: Int) {
    card_template.mana = some_value * 2
}

#[test]
fn iterate_cards_and_mutate() {
    mut game = Game {
        card_templates: [
            CardId::MightyGolem:  CardTemplate { mana: 5, healing_per_second: 42.13 },
            CardId::Earthquake:   CardTemplate { mana: 3, healing_per_second: 0.3 },
            CardId::MysticSpring: CardTemplate { mana: 2, healing_per_second: 1.5 },
        ],
    }

    mut count = 0
    for mut card_template in game.card_templates {
        print('Before: Mana: {card_template.mana}, Healing per second: {card_template.healing_per_second}')
        overwite_card_template(&card_template, count)
        print('After: Mana: {card_template.mana}, Healing per second: {card_template.healing_per_second}')
        count += 1
    }

    assert(count == 3, "should iterate over 3 cards")
}


#[test]
fn length() {
    mut game = Game {
        card_templates: [ : ],
    }

    assert(game.card_templates.len() == 0, "should be zero")
    assert(game.card_templates.is_empty(), "should be empty") // Intentionally redundant

    game.card_templates[CardId::Earthquake] = CardTemplate { mana: -1, healing_per_second: 0.0 }

    assert(game.card_templates.len() == 1, "should be one after inserting")
    assert(game.card_templates[CardId::Earthquake].mana == -1, "should be initial value of -1")

    game.card_templates[CardId::Earthquake] = CardTemplate { mana: 92, healing_per_second: 909.0 }

    assert(game.card_templates.len() == 1, "should still be one after updating existing")
    assert(game.card_templates[CardId::Earthquake].mana == 92, "should be 92 after the update")

    game.card_templates[CardId::EtherealDragon] = CardTemplate { mana: 10, healing_per_second: 0.0 }
    assert(game.card_templates.len() == 2, "should be 2 after the dragon")

    game.card_templates.remove(CardId::Earthquake)
    assert(game.card_templates.len() == 1, "should be 1 after removing a card")
}




struct ScalarGame {
    card_templates: [Int: CardTemplate; 2],
}

#[test]
fn scalar_key() {
    mut game = ScalarGame {
        card_templates: [ -909: CardTemplate { mana: 3, healing_per_second: 0.3 } ],
    }
    assert(game.card_templates.len() == 1, "should be 1 after adding a card")
    game.card_templates[2] = CardTemplate { mana: 92, healing_per_second: 909.0 }

    assert(game.card_templates.len() == 2, "should be 2 after adding a card")
    assert(game.card_templates[-909].mana == 3, "mana should be 3 for card -909")

    game.card_templates.remove(-909)
    assert(game.card_templates.len() == 1, "should be 1 after removing")

    game.card_templates.remove(2)
    assert(game.card_templates.is_empty(), "should be empty after removing")
}

struct Deck {
   card_id_to_mana: [Int: Float; 2],
}

struct DeckHolder {
    deck: Deck,
}

#[test]
fn scalar_value() {
    holder = DeckHolder {
        deck: Deck {
            card_id_to_mana: [2: 3.14]
        }
    }

    assert(holder.deck.card_id_to_mana[2] == 3.14, "must be found")
}

#[test]
fn scalar_value_insert() {
    mut holder = DeckHolder {
        deck: Deck {
            card_id_to_mana: [2: 3.14]
        }
    }

    assert(holder.deck.card_id_to_mana[2] == 3.14, "must be found")

    assert(holder.deck.card_id_to_mana.len() == 1, "two cards")

    holder.deck.card_id_to_mana[-99999] = 6.28

    assert(holder.deck.card_id_to_mana.len() == 2, "two cards")

    assert(holder.deck.card_id_to_mana[2] == 3.14, "must be found")
    assert(holder.deck.card_id_to_mana[-99999] == 6.28, "must be found")
}
